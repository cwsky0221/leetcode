1.查找数组中两个数和等于目标值的下标
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

solution：
class Solution {
    public int[] twoSum(int[] nums, int target) {
          Map<Integer,Integer> map = new HashMap<Integer,Integer>();
          for(int i=0;i<nums.length;i++){
              int temp = target - nums[i];
              if(map.containsKey(temp)){
                  return new int[]{map.get(temp),i};
              }
              map.put(nums[i],i);
          }
        throw new IllegalArgumentException("No two sum solution"); 
    }
}

2.int 反转
Input: 123
Output: 321

solution；
class Solution {
    public int reverse(int x) {
        int reverse = 0 ;
        
        while(x != 0){
            int pop = x%10;
            x/=10;
            if(reverse>Integer.MAX_VALUE/10 || reverse<Integer.MIN_VALUE/10) return 0;
            reverse = reverse*10+pop;
        }
        return reverse;
    }
}
3.int 反转后和原来一样
Input: 121
Output: true
Input: 122
Output: false
class Solution {
    public boolean isPalindrome(int x) {
        final int fix = x;
        int rev = 0;
        while(x!=0){
            int pop = x%10;
            x/=10;
            rev = rev*10+pop;
        }
        
        return fix == rev;
    }
}

4.罗马数字换算
Input: "III"
Output: 3
Input: "IV"
Output: 4
Input: "IX"
Output: 9
class Solution {
    public int romanToInt(String s) {
        Map<Character,Integer> map = new HashMap<Character,Integer>();
        map.put('I', 1);
	    map.put('V', 5);
	    map.put('X', 10);
	    map.put('L', 50);
	    map.put('C', 100);
	    map.put('D', 500);
	    map.put('M', 1000);
        int len = s.length();
        int result = map.get(s.charAt(len - 1));
        for(int i= len -2;i>=0;i--){
            if(map.get(s.charAt(i))>=map.get(s.charAt(i+1))){
                result += map.get(s.charAt(i));
            }else{
                result -= map.get(s.charAt(i));
            }
        }
        return result;
    }
}









